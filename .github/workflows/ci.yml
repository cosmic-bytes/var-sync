name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.24'

jobs:
  # Code quality and linting
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: make deps

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m --out-format=colored-line-number

    - name: Check formatting
      run: |
        make fmt
        if [ -n "$(git diff --name-only)" ]; then
          echo "Code is not properly formatted. Please run 'make fmt'."
          git diff
          exit 1
        fi

    - name: Run go vet
      run: make vet

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install security tools
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Run security audit
      run: make security

  # Unit tests
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: make deps

    - name: Run unit tests
      run: make test-unit

  # Integration tests
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: make deps

    - name: Run integration tests
      run: make test-integration

  # Test coverage
  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: make deps

    - name: Run tests with coverage
      run: make test-coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage reports as artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.out
          coverage.html

  # Race condition tests
  test-race:
    name: Race Condition Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: make deps

    - name: Run race condition tests
      run: make test-race

  # Performance tests
  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: make deps

    - name: Run performance benchmarks
      run: make test-performance

    - name: Upload performance profiles as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: performance-profiles
        path: |
          cpu.prof
          mem.prof

  # Memory leak tests
  test-memory:
    name: Memory Leak Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: make deps

    - name: Run memory leak tests
      run: make test-memory

  # Cross-platform build tests
  build-matrix:
    name: Build Matrix Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.23', '1.24']
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Install dependencies
      run: |
        go mod download
        go mod tidy

    - name: Build application
      run: go build -v .

    - name: Run short tests
      run: go test -short -timeout 5m ./...

  # Docker build test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create Dockerfile for testing
      run: |
        cat > Dockerfile << EOF
        FROM golang:1.24-alpine AS builder
        WORKDIR /app
        COPY go.mod go.sum ./
        RUN go mod download
        COPY . .
        RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o var-sync .

        FROM alpine:latest
        RUN apk --no-cache add ca-certificates
        WORKDIR /root/
        COPY --from=builder /app/var-sync .
        CMD ["./var-sync"]
        EOF

    - name: Build Docker image
      run: docker build -t var-sync:test .

    - name: Test Docker image
      run: docker run --rm var-sync:test ./var-sync -version

  # Dependency vulnerability check
  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Run vulnerability check
      run: govulncheck ./...

  # Aggregate results
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: 
      - lint
      - security
      - test-unit
      - test-integration
      - test-coverage
      - test-race
      - test-performance
      - test-memory
      - build-matrix
      - docker-build
      - dependency-check
    if: always()
    steps:
    - name: Check all jobs
      run: |
        if [[ "${{ needs.lint.result }}" != "success" ]]; then
          echo "Lint job failed"
          exit 1
        fi
        if [[ "${{ needs.security.result }}" != "success" ]]; then
          echo "Security job failed"
          exit 1
        fi
        if [[ "${{ needs.test-unit.result }}" != "success" ]]; then
          echo "Unit tests failed"
          exit 1
        fi
        if [[ "${{ needs.test-integration.result }}" != "success" ]]; then
          echo "Integration tests failed"
          exit 1
        fi
        if [[ "${{ needs.test-coverage.result }}" != "success" ]]; then
          echo "Coverage tests failed"
          exit 1
        fi
        if [[ "${{ needs.test-race.result }}" != "success" ]]; then
          echo "Race condition tests failed"
          exit 1
        fi
        if [[ "${{ needs.test-performance.result }}" != "success" ]]; then
          echo "Performance tests failed"
          exit 1
        fi
        if [[ "${{ needs.test-memory.result }}" != "success" ]]; then
          echo "Memory leak tests failed"
          exit 1
        fi
        if [[ "${{ needs.build-matrix.result }}" != "success" ]]; then
          echo "Build matrix failed"
          exit 1
        fi
        if [[ "${{ needs.docker-build.result }}" != "success" ]]; then
          echo "Docker build failed"
          exit 1
        fi
        if [[ "${{ needs.dependency-check.result }}" != "success" ]]; then
          echo "Dependency check failed"
          exit 1
        fi
        echo "All CI jobs passed successfully!"

    - name: Post success notification
      if: success()
      run: echo "🎉 All tests passed! The code is ready for deployment."